import discord
from discord.ext import commands, tasks
import logging
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta, time as dtime
import asyncio
import discord.utils
from discord.ui import View, Button
import pytz
import json
from timetable import timetable_fidner
from create_crop import create_cropped_image
from timetable2 import timetable_finde

load_dotenv()
token = os.getenv('DISCORD_TOKEN')

handlers = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
intent = discord.Intents.default()
intent.message_content = True
intent.members = True

bot = commands.Bot(command_prefix='/', intents=intent)
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
ROLE_CHANNEL_ID = int(os.getenv('ROLE_CHANNEL_ID'))  # ‡πÉ‡∏™‡πà channel id ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏¢‡∏®
TIMETABLE = timetable_finde()

@bot.command(name="table_image")
async def table_image(ctx):
    if not ctx.message.attachments:
        await ctx.send("please insert class table")
        return
    attachment = ctx.message.attachments[0]
    if not attachment.filename.lower().endswith(('.jpg')):
        await ctx.send("‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")
        return
    await attachment.save("class_image.jpg")
    await ctx.send(f"processing...")

    try:
        create_cropped_image("class_image.jpg")
        global TIMETABLE
        TIMETABLE = timetable_fidner()
        await ctx.send(f"Image successfully processed")
        # Send timetable day by day
        for day, classes in TIMETABLE.items():
            msg = f"**{day.capitalize()}**\n"
            for idx, c in enumerate(classes, 1):
                msg += f"{idx}. ‡∏ß‡∏¥‡∏ä‡∏≤: {c.get('subject_code', c.get('subject', ''))} | ‡∏´‡πâ‡∏≠‡∏á: {c.get('room', '')}\n | ‡∏Ñ‡∏£‡∏π: {c.get('teacher', '----')}\n"
            await ctx.send(msg)
    except Exception as e:
        await ctx.send("")

@bot.command()
async def test_channel(ctx):
    channel = bot.get_channel(CHANNEL_ID)
    await ctx.send(f"channel = {channel}")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≤‡∏ö
CLASS_DURATION = 50  # ‡∏ô‡∏≤‡∏ó‡∏µ

@bot.command(name="event40mins")
async def event_40mins(ctx):
    global CLASS_DURATION
    CLASS_DURATION = 40
    await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 40 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

@bot.command(name="event50mins")
async def event_50mins(ctx):
    global CLASS_DURATION
    CLASS_DURATION = 50
    await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 50 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

def get_next_class_time():
    now = datetime.now()
    start_time = dtime(8, 10)
    for i in range(len(TIMETABLE.get(now.strftime("%A").lower(), []))):
        class_time = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * i)).time()
        if now.time() < class_time:
            return i, class_time
    return None, None

@bot.event
async def on_ready():
    print(f'hihihi Im {bot.user.name}')
    if not notify_class.is_running():
        notify_class.start()
    if not notify_exam_and_hw.is_running():
        notify_exam_and_hw.start()

@tasks.loop(minutes=1)
async def notify_class():
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    weekday = now.strftime("%A").lower()
    if weekday not in TIMETABLE:
        return

    timetable_today = TIMETABLE[weekday].copy()
    # --- ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡∏≤‡∏ö‡∏ä‡∏î‡πÄ‡∏â‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö 9 ---
    makeup = load_makeup()
    if weekday in makeup:
        from_day = makeup[weekday]["from_day"]
        period = makeup[weekday]["period"]
        if from_day in TIMETABLE and 0 <= period < len(TIMETABLE[from_day]):
            makeup_class = TIMETABLE[from_day][period]
            if len(timetable_today) >= 9:
                timetable_today[8] = makeup_class  # ‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏≤‡∏ö 9
            else:
                while len(timetable_today) < 8:
                    timetable_today.append({"room": "----", "subject_code": "----"})
                timetable_today.append(makeup_class)

    start_time = dtime(8, 10)
    channel = discord.utils.get(bot.get_all_channels(), id=CHANNEL_ID)
    guild = channel.guild if channel else None

    # --- ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≤‡∏ö (‡∏û‡∏±‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏ö 7) ---
    class_times = []
    t = datetime.combine(now.date(), start_time)
    for i in range(len(timetable_today)):
        class_times.append(t.time())
        if i == 6:  # ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏ö 7 ‡∏û‡∏±‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            t += timedelta(minutes=CLASS_DURATION + 10)
        else:
            t += timedelta(minutes=CLASS_DURATION)

    for i in range(len(timetable_today) - 1):
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏ö‡∏Ñ‡∏≤‡∏ö 2 ‡∏ô‡∏≤‡∏ó‡∏µ
        notify_time = (datetime.combine(now.date(), class_times[i]) + timedelta(minutes=CLASS_DURATION - 2)).time()
        next_class = timetable_today[i + 1]
        if now.time().hour == notify_time.hour and now.time().minute == notify_time.minute:
            subject_code = next_class.get('subject_code') or "----"
            room = next_class.get('room') or "----"
            subject_role = discord.utils.get(guild.roles, name=subject_code)
            if subject_role is None:
                subject_role = await guild.create_role(name=subject_code)
            room_role = discord.utils.get(guild.roles, name=room)
            if room_role is None:
                room_role = await guild.create_role(name=room)
            await channel.send(
                f"{subject_role.mention} {room_role.mention}\n"
                f"‚è∞ ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {i+1} ‡πÅ‡∏•‡πâ‡∏ß\n"
                f"‡∏Ñ‡∏≤‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: {subject_code} (‡∏´‡πâ‡∏≠‡∏á {room})"
            )
            break

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏ö‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    last_class_end = (datetime.combine(now.date(), class_times[-1]) + timedelta(minutes=CLASS_DURATION)).time()
    if now.time().hour == last_class_end.hour and now.time().minute == last_class_end.minute:
        await channel.send("‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û üöå")

@tasks.loop(minutes=1)
async def notify_exam_and_hw():
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    if now.hour == 19 and now.minute == 0:
        channel = discord.utils.get(bot.get_all_channels(), id=CHANNEL_ID)
        if not channel:
            return

        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≠‡∏ö
        exams = load_exams()
        if exams:
            msg = "‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≠‡∏ö\n"
            for e in exams:
                exam_date = datetime.strptime(e['date'], "%Y-%m-%d").replace(tzinfo=tz)
                days_left = (exam_date.date() - now.date()).days
                if days_left >= 0:
                    msg += f"- {e['subject']} : ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {days_left} ‡∏ß‡∏±‡∏ô (‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {exam_date.strftime('%d/%m/%Y')})\n"
            await channel.send(msg)

        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô
        homeworks = load_homeworks()
        if homeworks:
            msg = "üìö ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô\n"
            for h in homeworks:
                due_date = datetime.strptime(h['date'], "%Y-%m-%d").replace(tzinfo=tz)
                days_left = (due_date.date() - now.date()).days
                if days_left >= 0:
                    msg += f"- {h['subject']} : ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {days_left} ‡∏ß‡∏±‡∏ô (‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {due_date.strftime('%d/%m/%Y')})\n"
            await channel.send(msg)

@bot.command(name="class")
async def class_now(ctx, arg=None):
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    if arg != "now":
        await ctx.send("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/class now` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≤‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
        return

    weekday = now.strftime("%A").lower()
    if weekday not in TIMETABLE:
        await ctx.send("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        return

    start_time = dtime(8, 10)
    timetable_today = TIMETABLE[weekday]
    found = False
    for i in range(len(timetable_today)):
        class_start = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * i)).time()
        class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * (i + 1))).time()
        if class_start <= now.time() < class_end:
            class_info = timetable_today[i]
            subject_code = class_info.get('subject_code') or "----"
            room = class_info.get('room') or "----"
            teacher = class_info.get('teacher') or "----"
            await ctx.send(
                f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {i+1}\n"
                f"‡∏ß‡∏¥‡∏ä‡∏≤: {subject_code}\n"
                f"‡∏´‡πâ‡∏≠‡∏á: {room}\n"
                f"‡∏Ñ‡∏£‡∏π: {teacher}\n"
            )
            found = True
            break
    if not found:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        first_class_start = (datetime.combine(now.date(), start_time)).time()
        last_class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * len(timetable_today))).time()
        if now.time() < first_class_start:
            await ctx.send("‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        elif now.time() >= last_class_end:
            await ctx.send("‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏†‡∏≤‡∏û üöå")
        else:
            await ctx.send("‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")

@bot.command(name="nextclass")
async def next_class(ctx):
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    weekday = now.strftime("%A").lower()
    if weekday not in TIMETABLE:
        await ctx.send("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
        return

    start_time = dtime(8, 10)
    timetable_today = TIMETABLE[weekday]
    for i in range(len(timetable_today)):
        class_start = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * i)).time()
        class_end = (datetime.combine(now.date(), start_time) + timedelta(minutes=CLASS_DURATION * (i + 1))).time()
        if now.time() < class_start:
            class_info = timetable_today[i]
            subject_code = class_info.get('subject_code') or "----"
            room = class_info.get('room') or "----"
            await ctx.send(
                f"‡∏Ñ‡∏≤‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {i+1}\n"
                f"‡∏ß‡∏¥‡∏ä‡∏≤: {subject_code}\n"
                f"‡∏´‡πâ‡∏≠‡∏á: {room}\n"
                f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤: {class_start.strftime('%H:%M')}"
            )
            return
    await ctx.send("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

ROLE_MESSAGE_ID = None  # ‡πÄ‡∏Å‡πá‡∏ö message id ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®
ROLE_EMOJI = "‚úÖ"       # ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®
ROLE_NAME = "DPSTEtub17"  # ‡∏ä‡∏∑‡πà‡∏≠ role

@bot.event
async def on_member_join(member):
    guild = member.guild
    role_name = ROLE_NAME
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ role ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    role = discord.utils.get(guild.roles, name=role_name)
    if role is None:
        role = await guild.create_role(name=role_name)
    await member.add_roles(role)
    try:
        await member.send(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® {role_name} ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception:
        pass  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏¥‡∏î DM

@bot.command(name="‡∏£‡∏±‡∏ö‡∏¢‡∏®")
async def give_role_button(ctx):
    if ctx.channel.id != ROLE_CHANNEL_ID:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    class RoleButtonView(View):
        @discord.ui.button(label=f"‡∏£‡∏±‡∏ö‡∏¢‡∏® {ROLE_NAME}", style=discord.ButtonStyle.primary, custom_id=f"get_{ROLE_NAME}")
        async def button_callback(self, interaction: discord.Interaction, button: Button):
            role_name = "MSEPtub7"
            guild = interaction.guild
            role = discord.utils.get(guild.roles, name=role_name)
            if role is None:
                role = await guild.create_role(name=role_name)
            await interaction.user.add_roles(role)
            await interaction.response.send_message(f"‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® {role.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
    await ctx.send(f"‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏® {ROLE_NAME}", view=RoleButtonView())


@bot.command(name="setuprole")
@commands.has_permissions(administrator=True)
async def setup_role_message(ctx):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏¢‡∏® (admin ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"""
    msg = await ctx.send(f"‡∏Å‡∏î {ROLE_EMOJI} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏® {ROLE_NAME}")
    await msg.add_reaction(ROLE_EMOJI)
    global ROLE_MESSAGE_ID
    ROLE_MESSAGE_ID = msg.id

@bot.event
async def on_raw_reaction_add(payload):
    if payload.message_id != ROLE_MESSAGE_ID:
        return
    if str(payload.emoji) != ROLE_EMOJI:
        return

    guild = bot.get_guild(payload.guild_id)
    member = guild.get_member(payload.user_id)
    if member is None or member.bot:
        return

    # ‡πÅ‡∏à‡∏Å role ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    subject_set = set()
    room_set = set()
    for day in TIMETABLE.values():
        for c in day:
            subject_set.add(c.get('subject_code') or "----")
            room_set.add(c.get('room') or "----")

    roles_to_give = []
    for name in subject_set | room_set:
        if name == "----" or name == "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£":
            continue
        role = discord.utils.get(guild.roles, name=name)
        if role is None:
            role = await guild.create_role(name=name)
        roles_to_give.append(role)

    await member.add_roles(*roles_to_give)
    try:
        await member.send("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    except Exception:
        pass

EXAM_FILE = "exams.json"

def load_exams():
    try:
        with open(EXAM_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_exams(exams):
    with open(EXAM_FILE, "w", encoding="utf-8") as f:
        json.dump(exams, f, ensure_ascii=False, indent=2)

@bot.command(name="exam")
async def add_exam(ctx, subject: str, date: str, year: int = None):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô /exam BIO 10/07 ‡∏´‡∏£‡∏∑‡∏≠ /exam BIO 10/07 2025"""
    try:
        parts = date.split("/")
        if len(parts) != 2:
            await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ /exam <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ] ‡πÄ‡∏ä‡πà‡∏ô /exam BIO 10/07 ‡∏´‡∏£‡∏∑‡∏≠ /exam BIO 10/07 2025")
            return
        day, month = map(int, parts)
        tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(tz)
        if year is None:
            year = now.year
        exam_date = datetime(year, month, day, 0, 0, tzinfo=tz)
        if exam_date < now:
            await ctx.send(f"‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö {exam_date.strftime('%d/%m/%Y')} ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ")
            return
    except Exception:
        await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ /exam <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ] ‡πÄ‡∏ä‡πà‡∏ô /exam BIO 10/07 ‡∏´‡∏£‡∏∑‡∏≠ /exam BIO 10/07 2025")
        return

    exams = load_exams()
    exams.append({"subject": subject, "date": exam_date.strftime("%Y-%m-%d")})
    save_exams(exams)
    await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö {subject} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {exam_date.strftime('%d/%m/%Y')} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

@bot.command(name="listexam")
async def list_exam(ctx):
    """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô)"""
    exams = load_exams()
    if not exams:
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö")
        return

    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î
    exams = sorted(
        exams,
        key=lambda e: (datetime.strptime(e['date'], '%Y-%m-%d').replace(tzinfo=tz) - now).days
    )
    embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö", color=0x00ff00)
    for e in exams:
        exam_date = datetime.strptime(e['date'], '%Y-%m-%d').replace(tzinfo=tz)
        days_left = (exam_date.date() - now.date()).days
        if days_left < 0:
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
        if days_left <= 3:
            color = 0xff0000  # ‡πÅ‡∏î‡∏á
        elif days_left <= 7:
            color = 0xffa500  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        else:
            color = 0x00ff00  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        embed.color = color
        embed.add_field(
            name=f"{e['subject']} (‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {exam_date.strftime('%d/%m/%Y')})",
            value=f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å **{days_left}** ‡∏ß‡∏±‡∏ô",
            inline=False
        )
    await ctx.send(embed=embed)

@bot.command(name="listhw")
async def list_hw(ctx):
    """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô)"""
    homeworks = load_homeworks()
    if not homeworks:
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô")
        return
    tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(tz)
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î
    homeworks = sorted(
        homeworks,
        key=lambda h: (datetime.strptime(h['date'], '%Y-%m-%d').replace(tzinfo=tz) - now).days
    )
    embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô", color=0x00ff00)
    for h in homeworks:
        due_date = datetime.strptime(h['date'], '%Y-%m-%d').replace(tzinfo=tz)
        days_left = (due_date.date() - now.date()).days
        if days_left < 0:
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
        if days_left <= 3:
            color = 0xff0000  # ‡πÅ‡∏î‡∏á
        elif days_left <= 7:
            color = 0xffa500  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        else:
            color = 0x00ff00  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        embed.color = color
        embed.add_field(
            name=f"{h['subject']} (‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {due_date.strftime('%d/%m/%Y')})",
            value=f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å **{days_left}** ‡∏ß‡∏±‡∏ô",
            inline=False
        )
    await ctx.send(embed=embed)

HW_FILE = "homeworks.json"

def load_homeworks():
    try:
        with open(HW_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_homeworks(homeworks):
    with open(HW_FILE, "w", encoding="utf-8") as f:
        json.dump(homeworks, f, ensure_ascii=False, indent=2)

@bot.command(name="hw")
async def add_hw(ctx, subject: str, date: str, year: int = None):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /hw MATH 15/07 ‡∏´‡∏£‡∏∑‡∏≠ /hw MATH 15/07 2025"""
    try:
        parts = date.split("/")
        if len(parts) != 2:
            await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ /hw <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ] ‡πÄ‡∏ä‡πà‡∏ô /hw MATH 15/07 ‡∏´‡∏£‡∏∑‡∏≠ /hw MATH 15/07 2025")
            return
        day, month = map(int, parts)
        tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(tz)
        if year is None:
            year = now.year
        due_date = datetime(year, month, day, 0, 0, tzinfo=tz)
        if due_date < now:
            await ctx.send(f"‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á {due_date.strftime('%d/%m/%Y')} ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ")
            return
    except Exception:
        await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ /hw <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ] ‡πÄ‡∏ä‡πà‡∏ô /hw MATH 15/07 ‡∏´‡∏£‡∏∑‡∏≠ /hw MATH 15/07 2025")
        return

    homeworks = load_homeworks()
    homeworks.append({"subject": subject, "date": due_date.strftime("%Y-%m-%d")})
    save_homeworks(homeworks)
    await ctx.send(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô {subject} ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {due_date.strftime('%d/%m/%Y')} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

room = "tub17"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
@bot.command(name=f"help{room}")
async def helptub7(ctx):
    embed = discord.Embed(
        title=f"üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ö‡∏≠‡∏ó class_{room}",
        description="‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ",
        color=0x3498db
    )
    embed.add_field(
        name="/class now",
        value="‡∏î‡∏π‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        inline=False
    )
    embed.add_field(
        name="/nextclass",
        value="‡∏î‡∏π‡∏Ñ‡∏≤‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
        inline=False
    )
    embed.add_field(
        name="/event40mins, /event50mins",
        value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (40 ‡∏´‡∏£‡∏∑‡∏≠ 50 ‡∏ô‡∏≤‡∏ó‡∏µ)",
        inline=False
    )
    embed.add_field(
        name="/exam <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ]",
        value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô `/exam BIO 10/07` ‡∏´‡∏£‡∏∑‡∏≠ `/exam BIO 10/07 2025`",
        inline=False
    )
    embed.add_field(
        name="/listexam",
        value="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô)",
        inline=False
    )
    embed.add_field(
        name="/hw <‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤> <‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô> [‡∏õ‡∏µ]",
        value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô `/hw MATH 15/07` ‡∏´‡∏£‡∏∑‡∏≠ `/hw MATH 15/07 2025`",
        inline=False
    )
    embed.add_field(
        name="/listhw",
        value="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô)",
        inline=False
    )
    embed.add_field(
        name="/‡∏£‡∏±‡∏ö‡∏¢‡∏®",
        value="‡∏£‡∏±‡∏ö‡∏¢‡∏® MSEPtub7 ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ /setuprole ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÅ‡∏ö‡∏ö‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ",
        inline=False
    )
    embed.add_field(
        name="/setuprole (admin)",
        value="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÅ‡∏ö‡∏ö‡∏£‡∏µ‡πÅ‡∏≠‡∏Ñ (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
        inline=False
    )
    embed.add_field(
        name="/createroles (admin)",
        value="‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô TIMETABLE (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
        inline=False
    )
    embed.add_field(
        name="/‡∏ä‡∏î <‡∏ß‡∏±‡∏ô> <‡∏Ñ‡∏≤‡∏ö>",
        value="‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡∏≤‡∏ö‡∏ä‡∏î‡πÄ‡∏â‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö 9 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô `/‡∏ä‡∏î monday 3`",
        inline=False
    )
    embed.add_field(
        name="/table change (teacher|room|subject_code) (day) (period) (new_value)",
        value="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÄ‡∏ä‡πà‡∏ô `/table change teacher monday 2 ‡∏Ñ‡∏£‡∏π...`",
        inline=False
    )
    embed.add_field(
        name="/table_look <day>",
        value="‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô `/table_look monday`",
        inline=False
    )
    embed.add_field(
        name="/table_image + <uploadimage>",
        value="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        inline=False
    )
    await ctx.send(embed=embed)

@bot.command(name="createroles")
@commands.has_permissions(administrator=True)
async def create_all_roles(ctx):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô TIMETABLE (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
    guild = ctx.guild
    subject_set = set()
    room_set = set()
    for day in TIMETABLE.values():
        for c in day:
            subject_set.add(c['subject_code'])
            room_set.add(c['room'])
    created = []
    for name in subject_set | room_set:
        if name == "----" or name == "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£":
            continue
        if not discord.utils.get(guild.roles, name=name):
            await guild.create_role(name=name)
            created.append(name)
    if created:
        await ctx.send(f"‡∏™‡∏£‡πâ‡∏≤‡∏á role: {', '.join(created)} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        await ctx.send("‡∏°‡∏µ role ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")

MAKEUP_FILE = "makeup.json"

def load_makeup():
    try:
        with open(MAKEUP_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_makeup(data):
    with open(MAKEUP_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@bot.command(name="‡∏ä‡∏î")
async def makeup_class(ctx, day: str, period: int):
    """
    ‡πÉ‡∏ä‡πâ /‡∏ä‡∏î <‡∏ß‡∏±‡∏ô> <‡∏Ñ‡∏≤‡∏ö> ‡πÄ‡∏ä‡πà‡∏ô /‡∏ä‡∏î monday 3
    ‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà <period> ‡∏Ç‡∏≠‡∏á <day> ‡∏°‡∏≤‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö 9 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    """
    day = day.lower()
    if day not in TIMETABLE:
        await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß")
        return
    if not (1 <= period <= len(TIMETABLE[day])):
        await ctx.send("‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return
    makeup = load_makeup()
    today = datetime.now(pytz.timezone('Asia/Bangkok')).strftime("%A").lower()
    makeup[today] = {"from_day": day, "period": period-1}  # zero-based index
    save_makeup(makeup)
    subject = TIMETABLE[day][period-1].get('subject_code') or "----"
    room = TIMETABLE[day][period-1].get('room') or "----"
    await ctx.send(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≤‡∏ö‡∏ä‡∏î‡πÄ‡∏â‡∏¢: {subject} ({room}) ‡∏à‡∏∞‡∏°‡∏≤‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö 9 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({today})")



@bot.command(name="table")
async def table_command(ctx, action: str, field: str = None, day: str = None, period: int = None, *, new_value: str = None):
    """
    ‡πÉ‡∏ä‡πâ /table change (teacher|room|subject_code) (day) (period) (new_value)
    ‡πÄ‡∏ä‡πà‡∏ô /table change teacher monday 2 ‡∏Ñ‡∏£‡∏π...
    """
    global TIMETABLE
    if action != "change":
        await ctx.send("‡πÉ‡∏ä‡πâ /table change (teacher|room|subject_code) (day) (period) (new_value)")
        return
    if field not in ("teacher", "room", "subject_code"):
        await ctx.send("field ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô teacher, room ‡∏´‡∏£‡∏∑‡∏≠ subject_code ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return
    if day is None or period is None or new_value is None:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ /table change (teacher|room|subject_code) (day) (period) (new_value)")
        return
    day = day.lower()
    if day not in TIMETABLE:
        await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß")
        return
    try:
        period = int(period)
        if not (1 <= period <= len(TIMETABLE[day])):
            await ctx.send("‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return
    except Exception:
        await ctx.send("period ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        return
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    TIMETABLE[day][period-1][field] = new_value
    await ctx.send(f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {field} ‡∏Ç‡∏≠‡∏á {day} ‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {period} ‡πÄ‡∏õ‡πá‡∏ô \"{new_value}\" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

@bot.command(name="table_look")
async def table_look(ctx, day: str):
    """
    ‡πÉ‡∏ä‡πâ /table_look <day> ‡πÄ‡∏ä‡πà‡∏ô /table_look monday
    """
    day = day.lower()
    if day not in TIMETABLE:
        await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß")
        return
    msg = f"**{day.capitalize()}**\n"
    for idx, c in enumerate(TIMETABLE[day], 1):
        subject_code = c.get('subject_code') or c.get('subject', "----")
        room = c.get('room') or "----"
        teacher = c.get('teacher') or "----"
        msg += f"{idx}. ‡∏ß‡∏¥‡∏ä‡∏≤: {subject_code} | ‡∏´‡πâ‡∏≠‡∏á: {room}\n | ‡∏Ñ‡∏£‡∏π: {teacher}\n"
    await ctx.send(msg)

bot.run(token, log_handler=handlers, log_level=logging.DEBUG)